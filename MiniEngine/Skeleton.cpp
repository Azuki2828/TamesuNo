/*!
*@brief	スケルトン
*/
#include "stdafx.h"
#include "Skeleton.h"
#include <comdef.h> 


void Bone::CalcWorldTRS(CVector3& trans, CQuaternion& rot, CVector3& scale)
{
	CMatrix mWorld = m_worldMatrix;
	//行列から拡大率を取得する。
	scale.x = mWorld.v[0].Length();
	scale.y = mWorld.v[1].Length();
	scale.z = mWorld.v[2].Length();
	m_scale = scale;
	//行列から平行移動量を取得する。
	trans.Set(mWorld.v[3]);
	m_positoin = trans;
	//行列から拡大率と平行移動量を除去して回転量を取得する。
	mWorld.v[0].Normalize();
	mWorld.v[1].Normalize();
	mWorld.v[2].Normalize();
	mWorld.v[3].Set(0.0f, 0.0f, 0.0f, 1.0f);
	rot.SetRotation(mWorld);
	m_rotation = rot;
}
Skeleton::Skeleton()
{
	//リザーブ。
	m_bones.reserve(BONE_MAX);
}
Skeleton::~Skeleton()
{
}
void Skeleton::UpdateBoneWorldMatrix(Bone& bone, const CMatrix& parentMatrix)
{
	CMatrix mBoneWorld;
	CMatrix localMatrix = bone.GetLocalMatrix();
	mBoneWorld = localMatrix * parentMatrix;
	
	bone.SetWorldMatrix(mBoneWorld);
	for (auto childBone : bone.GetChildren()) {
		UpdateBoneWorldMatrix(*childBone, mBoneWorld);
	}
}
bool Skeleton::Init(const char* tksFilePath)
{
	//tksファイルをロードする。
	m_tksFile.Load(tksFilePath);
	//ボーン行列を構築する。
	BuildBoneMatrices();
	return true;
}
void Skeleton::CopyBoneMatrix(
	Skeleton& upperBody,
	Skeleton& lowerBody,
	const char* upperBodyBoneNameArray[],
	const char* lowerBodyBoneNameArray[],
	int upperBodyBoneNameArraySize,
	int lowerBodyBoneNameArraySize
)
{
	//ボーンの数だけfor分で回してコピーする。
	for (int boneNum = 0; boneNum < m_bones.size(); boneNum++) {

		//ボーンの名前を取得する。
		const wchar_t* carentBoneName = m_bones[boneNum].get()->GetName();

		//ボーンの名前をconst wchat_tからcharに変換。
		char carentBoneNameChar[c_nameSize];
		wcstombs(carentBoneNameChar, carentBoneName, c_nameSize);

		//ボーンが見つかった？
		bool findBone = false;

		//文字列の数だけ繰り返す。
		for (int arrayNum = 0; arrayNum < upperBodyBoneNameArraySize; arrayNum++) {

			//文字列を比較。
			if (
				strcmp(
					static_cast<const char*>(carentBoneNameChar),
					upperBodyBoneNameArray[arrayNum]
				) == 0) {
				m_bones[boneNum]->SetLocalMatrix(upperBody.m_bones[boneNum]->GetLocalMatrix());
				// todo m_bones[boneNum].get()->SetLocalMatrix(upperBody.GetBone(boneNum)->GetLocalMatrix());
				findBone = true;
			}
		}

		for (int arrayNum = 0; arrayNum < lowerBodyBoneNameArraySize; arrayNum++) {

			//文字列を比較。
			if (
				strcmp(
					static_cast<const char*>(carentBoneNameChar),
					lowerBodyBoneNameArray[arrayNum]
				) == 0) {
				m_bones[boneNum]->SetLocalMatrix(lowerBody.m_bones[boneNum]->GetLocalMatrix());
				//todo m_bones[boneNum].get()->SetLocalMatrix(lowerBody.GetBone(boneNum)->GetLocalMatrix());
				findBone = true;
			}
		}

		//ボーンが見つからなかった。
		if (!findBone) {

			m_boneMatrixs[boneNum] = upperBody.m_boneMatrixs[boneNum];
		}
	}
}
void Skeleton::BuildBoneMatrices()
{
	m_tksFile.QueryBone([&](CTksFile::SBone & tksBone) {
		//バインドポーズ。
		CMatrix bindPoseMatrix;
		memcpy(bindPoseMatrix.m[0], &tksBone.bindPose[0], sizeof(tksBone.bindPose[0]));
		memcpy(bindPoseMatrix.m[1], &tksBone.bindPose[1], sizeof(tksBone.bindPose[1]));
		memcpy(bindPoseMatrix.m[2], &tksBone.bindPose[2], sizeof(tksBone.bindPose[2]));
		memcpy(bindPoseMatrix.m[3], &tksBone.bindPose[3], sizeof(tksBone.bindPose[3]));
		bindPoseMatrix.m[0][3] = 0.0f;
		bindPoseMatrix.m[1][3] = 0.0f;
		bindPoseMatrix.m[2][3] = 0.0f;
		bindPoseMatrix.m[3][3] = 1.0f;

		//バインドポーズの逆行列。
		CMatrix invBindPoseMatrix;
		memcpy(invBindPoseMatrix.m[0], &tksBone.invBindPose[0], sizeof(tksBone.invBindPose[0]));
		memcpy(invBindPoseMatrix.m[1], &tksBone.invBindPose[1], sizeof(tksBone.invBindPose[1]));
		memcpy(invBindPoseMatrix.m[2], &tksBone.invBindPose[2], sizeof(tksBone.invBindPose[2]));
		memcpy(invBindPoseMatrix.m[3], &tksBone.invBindPose[3], sizeof(tksBone.invBindPose[3]));
		invBindPoseMatrix.m[0][3] = 0.0f;
		invBindPoseMatrix.m[1][3] = 0.0f;
		invBindPoseMatrix.m[2][3] = 0.0f;
		invBindPoseMatrix.m[3][3] = 1.0f;

		wchar_t boneName[256];
		mbstowcs(boneName, tksBone.name.get(), 256);
		BonePtr bone = std::make_unique<Bone>(
			boneName,
			bindPoseMatrix,
			invBindPoseMatrix,
			tksBone.parentNo,
			tksBone.no
			);
#if BUILD_LEVEL != BUILD_LEVEL_MASTER
		//ボーンのバリデーションチェック。
		//maxScriptでやりたいところではあるが、とりあえずこっち。
		auto it = std::find_if(m_bones.begin(), m_bones.end(), [&](auto & bone) {return wcscmp(boneName, bone->GetName()) == 0;  });
		if (it != m_bones.end()) {
			//同名のボーンが見つかった。
			_bstr_t b(boneName);
			const char* c = b;
			TK_WARNING("同名のボーンが見つかりました。未定の動作です。データを修正してください。%s", c);
		}
#endif
		m_bones.push_back(std::move(bone));
		});
	for (auto& bone : m_bones) {
		if (bone->GetParentBoneNo() != -1) {
			m_bones.at(bone->GetParentBoneNo())->AddChild(bone.get());
			//ローカルマトリクスを計算。
			const CMatrix& parentMatrix = m_bones.at(bone->GetParentBoneNo())->GetInvBindPoseMatrix();
			CMatrix localMatrix;
			localMatrix = bone->GetBindPoseMatrix() * parentMatrix;
			bone->SetLocalMatrix(localMatrix);
		}
		else {
			bone->SetLocalMatrix(bone->GetBindPoseMatrix());
		}
	}


	//ボーン行列を確保
	m_boneMatrixs = std::make_unique<CMatrix[]>(m_bones.size());
	m_isInited = true;

}

void Skeleton::Update(const CMatrix& mWorld)
{
	
	//アニメーションが流し込まれていると、ボーン行列がルートボーン空間に
	//変換されているが、流されていないと親の骨の座標系のままなので、
	//ルートボーン空間→ワールド空間への変換を行う。
	for (auto& bone : m_bones) {
		if (bone->GetParentBoneNo() != -1) {
			continue;
		}
		//ルート。
		UpdateBoneWorldMatrix(*bone, mWorld);
	}

	//ボーン行列を計算。
	int boneNo = 0;
	for (auto& bonePtr : m_bones) {
		CMatrix mBone;
		mBone = bonePtr->GetInvBindPoseMatrix() * bonePtr->GetWorldMatrix();
		m_boneMatrixs[boneNo] = mBone;
		boneNo++;
	}	
}

void Skeleton::UpdateHasVerUniqueAnimation(const CMatrix& mWorld){

	//ボーン行列をルートボーンの空間からワールド空間を構築していく。
	for (auto& bone : m_bones) {
		CMatrix mBoneWorld;
		CMatrix localMatrix = bone->GetLocalMatrix();
		//親の行列とローカル行列を乗算して、ワールド行列を計算する。
		mBoneWorld = localMatrix * mWorld;
		bone->SetWorldMatrix(mBoneWorld);
	}
}
